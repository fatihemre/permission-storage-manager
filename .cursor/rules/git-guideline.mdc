---
description: 
globs: 
alwaysApply: true
---
---
description: Git Commit, Branching, Versioning and Workflow Hygiene Guidelines
globs:
  - "*"
---

# Git Commit, Branching, Versioning and Workflow Hygiene Guidelines

## 1. Code Quality First
- Tüm commit’ler kod kalitesini artırmalı ya da korumalıdır.
- `main`, `production` gibi ana branch’lara bozuk veya deneysel kod gönderme.

---

## 2. S ❌ **ASLA `git add .` KULLANMA**
- Bu komut, alakasız değişikliklerin karışmasına ve commit geçmişinin bozulmasına neden olur.

### ✅ **Dosyaları Tek Tek Stage Et**
- `git add <dosya>` ile sadece ilgili dosyaları ekle.
- Gruplu staging örneği:  
  `git add app/api/v1/endpoints/auth.py app/api/v1/endpoints/users.py`
- `git diff <dosya>` ile değişiklikleri commit öncesi kontrol et.

---

## 3. Commit Yapısı ve Biçimi

### ✅ Conventional Commits Kullan
Aşağıdaki tiplerden biriyle başla, ardından `(scope): description` formatı kullan:
- `feat`: Yeni özellik
- `fix`: Hata düzeltme
- `docs`: Belge değişiklikleri
- `style`: Biçimsel (boşluk, noktalama vs.)
- `refactor`: Yapısal değişiklik (özellik/hata değil)
- `perf`: Performans iyileştirmesi
- `test`: Test ekleme/düzeltme
- `chore`: Teknik borç, temizlik, vs.
- `build`: Build sistemi değişiklikleri
- `ci`: CI/CD yapılandırmaları

#### Örnekler:
- `feat(auth): add JWT refresh token`
- `fix(users): resolve soft delete issue`

### 📌 Commit Mesaj Kuralları:
- İngilizce ve emir kipinde yaz (`add`, `fix`, `remove` vs.).
- Açıklayıcı ve kısa olmalı (< 50 karakter önerilir).
- Değişikliğin **neden** yapıldığı net olmalı.

---

## 4. Commit Granülerliği

- Her commit yalnızca **bir mantıksal değişiklik** içermeli.
- Birden fazla konu varsa ayrı commit'lere bölünmeli.
- Eğer mesajda "and", "also", "updated X and added Y" gibi ifadeler varsa, muhtemelen bölünmesi gerekir.
- Büyük değişiklikleri küçük, odaklı commit'lere böl.

---

## 5. Commit Sıralaması ve Gruplama

**Commit’lerin sırası mantıklı bir akış izlemeli:**
1. `chore(deps): add new package`
2. `feat(config): configure new service`
3. `feat(auth): implement login feature`
4. `chore(cleanup): remove deprecated code`

**Gruplama Örnekleri:**
- Bağımlılıklar ve paket güncellemeleri
- Konfigürasyonlar
- Özellik geliştirmeleri
- Hata düzeltmeleri
- Refactor ve temizlik

---

## 6. Branch Yapısı

Branch isimlendirmesinde küçük harf ve tire kullan:
- `feature/<özellik-adı>`
- `bugfix/<hata-adı>`
- `hotfix/<acil-düzeltme>`
- `chore/<temizlik-konusu>`

---

## 7. Pull Request Kuralları

- Tüm değişiklikler PR ile yapılmalı.
- PR başlıkları da conventional commit formatında olmalı.
- PR açıklamaları:
  - Ne değişti?
  - Neden değişti?
  - İlgili issue veya bağlar.

---

## 8. Code Review ve Birleştirme

-i tarafından gözden geçirilmeli.
- Commit’ler birleştirmeden önce mantıksal, temiz ve test edilmiş olmalı.
- Ortak branch’lere (main, release) force-push **yasaktır**.

---

## 9. Versiyonlama Kuralları (SemVer)

### 📌 Semantic Versioning 2.0.0 kullan:
- `MAJOR.MINOR.PATCH` (ör: `2.4.1`)
- **MAJOR**: Geriye dönük uyumsuz değişiklik
- **MINOR**: Yeni özellik, uyumlu
- **PATCH**: Hata düzeltmesi, uyumlu

#### 🔐 Versiyonlama Onay Süreci:
> Yeni versiyon oluşturulmadan önce:
> - **Yapılan değişikliklere göre bir versiyon önerisi sun.**
> - **Major/Minor/Patch seçiminin nedenlerini açıkla.**
> - **Ben uygun gördüğümde versiyonlama yapabilirsin.**
> - **Benim onayım olmadan versiyon oluşturma.**

### 📌 Versiyon Tag’leri:
- Her sürüm `vX.Y.Z` formatında etiketlenmeli (`v1.2.3`)
- Mümkünse **imzalı (signed)** tag kullanılmalı.

---

## 10. Genel Hijyen Kuralları

- `.gitignore` içindeki dosyaları ekleme. `git add -f` kullanma.
- Lokal konfigürasyon (ör. `.env.local`, `.vscode/`, `*.log`) commit'lenmemeli.
- Lokal ve uzak feature branch’lerini merge sonrası sil.
- Git geçmişini asla force-push ile geri alıp yeniden yazma (`git revert` kullan).
- Otomatik kontrol sistemleri kur (CI, linter, pre-commit hook vs.).

---

## 11. Commit ve Push Öncesi Kontrol Listesi

- `git diff`, `git diff --cached` ile tüm değişiklikleri gözden geçir.
- `git status` ile stage edilmiş dosyaları kontrol et.
- Commit geçmişini `git log --oneline` ile gözden geçir.
- Testleri çalıştır, her şeyin düzgün çalıştığından emin ol.